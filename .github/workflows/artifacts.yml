# This workflow will create artifacts for all merges into master
# It will include linux, macos binaries and an msi installer.

name: Artifacts

on:
  push:
    branches:
      - master
      - staging

jobs:
  windows:
    runs-on: [windows-latest]
    steps:
      # Checkout
      - name: Checkout sources
        uses: actions/checkout@v2

      # Airshipper Version
      # cd client && cargo pkgid | cut -d# -f2 | cut -d: -f2 (Linux)
      # cargo pkgid | ForEach-Object { $_.split(":")[3] } (Windows)
      - name: Aquire Version
        id: vars
        shell: pwsh
        run: |
          cd client 
          echo "::set-output name=version::$(cargo pkgid | ForEach-Object { $_.split(":")[3] })"
      - name: Print version
        run: echo "Airshipper v${{ steps.vars.outputs.version }}"

      # Cache
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      # Toolchain Version
      - name: Aquire Toolchain Version
        id: vars
        shell: pwsh
        run: echo "::set-output name=rust_toolchain::$(cat rust-toolchain)"

      # Toolchain
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ steps.vars.outputs.rust_toolchain }}
          override: true

      # Cargo Wix
      - name: Install cargo-wix
        run: cargo install cargo-wix

      # Enable CRT linkage to avoid VCRUNTIME140_1.dll being missing
      - name: Enable static CRT linkage
        run: |
          mkdir .cargo
          echo '[target.x86_64-pc-windows-msvc]' >> .cargo/config
          echo 'rustflags = ["-Ctarget-feature=+crt-static"]' >> .cargo/config

      # Create Installer
      - name: MSI Installer
        run: cargo wix client/Cargo.toml -o .\target\wix\ --nocapture

      # Rename installer
      - name: Rename
        run: |
          Remove-Item â€“path target/wix/airshipper-windows.msi -ErrorAction Ignore
          ren target/wix/airshipper-${{ steps.vars.outputs.version }}-x86_64.msi airshipper-windows.msi

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: airshipper-windows-installer
          path: target/wix/airshipper-windows.msi

  linux:
    runs-on: [ubuntu-latest]
    steps:
      # Checkout
      - name: Checkout sources
        uses: actions/checkout@v2

      # Cache
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      # Toolchain Version
      - name: Aquire Toolchain Version
        id: vars
        shell: pwsh
        run: echo "::set-output name=rust_toolchain::$(cat rust-toolchain)"

      # Toolchain
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ steps.vars.outputs.rust_toolchain }}
          override: true

      # Build
      - name: Build
        run: cargo build --bin airshipper --release

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: airshipper-linux
          path: target/release/airshipper

  macos:
    runs-on: [macos-latest]
    steps:
      # Checkout
      - name: Checkout sources
        uses: actions/checkout@v2

      # Cache
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      # Toolchain Version
      - name: Aquire Toolchain Version
        id: vars
        shell: pwsh
        run: echo "::set-output name=rust_toolchain::$(cat rust-toolchain)"

      # Toolchain
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ steps.vars.outputs.rust_toolchain }}
          override: true

      # Build
      - name: Build
        run: cargo build --bin airshipper --release

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: airshipper-macos
          path: target/release/airshipper
