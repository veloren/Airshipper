# This workflow will create artifacts for all merges into master
# It will include linux, macos binaries and an msi installer.

name: Artifacts

on:
  # https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/
  workflow_dispatch:
  push:
    branches:
      - master
      - r*.*.*

jobs:
  windows:
    runs-on: [windows-latest]
    steps:
      # Checkout
      - name: Checkout sources
        uses: actions/checkout@v2

      # Github Actions is counted torwards lfs bandwidth quota (1 GB/month on free account)
      # Therefore we must cache them to be as efficient as possible.
      # Source: https://github.com/actions/checkout/issues/165

      # Store a list of all lfs files
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      # Restore lfs files if cache valid
      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1

      # Pull lfs files incase cache is invalid
      - name: Git LFS Pull
        run: git lfs pull

      # Cache
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      # Toolchain Version
      - name: Aquire Toolchain Version
        id: tool
        shell: pwsh
        run: echo "::set-output name=rust_toolchain::$(cat rust-toolchain)"

      # Toolchain
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ steps.tool.outputs.rust_toolchain }}
          override: true

      # Airshipper Version
      # cd client && cargo pkgid | cut -d# -f2 | cut -d: -f2 (Linux)
      # cargo pkgid | ForEach-Object { $_.split(":")[3] } (Windows)
      - name: Aquire Version
        id: vars
        shell: pwsh
        run: |
          cd client 
          echo "::set-output name=version::$(cargo pkgid | ForEach-Object { $_.split(":")[3] })"
      - name: Print version
        run: echo "Airshipper v${{ steps.vars.outputs.version }}"

      # Cargo Wix
      - name: Install cargo-wix
        run: cargo install cargo-wix --version 0.3.0

      # Enable CRT linkage to avoid VCRUNTIME140_1.dll being missing
      - name: Enable static CRT linkage
        run: |
          mkdir .cargo
          echo '[target.x86_64-pc-windows-msvc]' >> .cargo/config
          echo 'rustflags = ["-Ctarget-feature=+crt-static"]' >> .cargo/config

      # Build
      - name: Build
        run: cargo build --bin airshipper --release --all-features

      # Create Installer
      - name: MSI Installer
        run: cargo wix client/Cargo.toml -o .\target\wix\ --nocapture --no-build

      # Rename installer
      - name: Rename
        run: |
          Remove-Item â€“path target/wix/airshipper-windows.msi -ErrorAction Ignore
          ren target/wix/airshipper-${{ steps.vars.outputs.version }}-x86_64.msi airshipper-windows.msi

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: airshipper-windows
          path: target/wix/airshipper-windows.msi

  linux:
    runs-on: [ubuntu-latest]
    steps:
      # Checkout
      - name: Checkout sources
        uses: actions/checkout@v2

      # Github Actions is counted torwards lfs bandwidth quota (1 GB/month on free account)
      # Therefore we must cache them to be as efficient as possible.
      # Source: https://github.com/actions/checkout/issues/165

      # Store a list of all lfs files
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      # Restore lfs files if cache valid
      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1

      # Pull lfs files incase cache is invalid
      - name: Git LFS Pull
        run: git lfs pull

      # Cache
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      # Toolchain Version
      - name: Aquire Toolchain Version
        id: tool
        shell: pwsh
        run: echo "::set-output name=rust_toolchain::$(cat rust-toolchain)"

      # Toolchain
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ steps.tool.outputs.rust_toolchain }}
          override: true

      # Avoid missing glibc
      - name: Enable static CRT linkage
        run: |
          mkdir .cargo
          echo '[target.x86_64-pc-windows-msvc]' >> .cargo/config
          echo 'rustflags = ["-Ctarget-feature=+crt-static"]' >> .cargo/config

      # Build
      - name: Build
        run: cargo build --bin airshipper --release --all-features

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: airshipper-linux
          path: target/release/airshipper

  macos:
    runs-on: [macos-latest]
    steps:
      # Checkout
      - name: Checkout sources
        uses: actions/checkout@v2

      # Github Actions is counted torwards lfs bandwidth quota (1 GB/month on free account)
      # Therefore we must cache them to be as efficient as possible.
      # Source: https://github.com/actions/checkout/issues/165

      # Store a list of all lfs files
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      # Restore lfs files if cache valid
      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1

      # Pull lfs files incase cache is invalid
      - name: Git LFS Pull
        run: git lfs pull

      # Cache
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      # Toolchain Version
      - name: Aquire Toolchain Version
        id: tool
        shell: pwsh
        run: echo "::set-output name=rust_toolchain::$(cat rust-toolchain)"

      # Toolchain
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ steps.tool.outputs.rust_toolchain }}
          override: true

      # Build
      - name: Build
        run: cargo build --bin airshipper --release --all-features

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: airshipper-macos
          path: target/release/airshipper
