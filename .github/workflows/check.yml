# This workflow will ensure that all MRs do compile, emit no warnings and are formatted correctly.

name: Check

on:
  push:
    branches-ignore:
      - "master"
    tags-ignore:
      - v*

jobs:
  check:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    name: Check
    steps:
      # Checkout
      - name: Checkout sources
        uses: actions/checkout@v2

      # Cache
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      # Toolchain Version
      - name: Aquire Toolchain Version
        id: vars
        shell: pwsh
        run: echo "::set-output name=rust_toolchain::$(cat rust-toolchain)"

      # Toolchain
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ steps.vars.outputs.rust_toolchain }}
          override: true

      # Check
      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
        env:
          RUSTFLAGS: "-D warnings"

  test:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    name: Test
    steps:
      # Checkout
      - name: Checkout sources
        uses: actions/checkout@v2

      # Cache
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      # Toolchain Version
      - name: Aquire Toolchain Version
        id: vars
        shell: pwsh
        run: echo "::set-output name=rust_toolchain::$(cat rust-toolchain)"

      # Toolchain
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ steps.vars.outputs.rust_toolchain }}
          override: true

      # Test
      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout sources
        uses: actions/checkout@v2

      # Cache
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      # Toolchain Version
      - name: Aquire Toolchain Version
        id: vars
        shell: pwsh
        run: echo "::set-output name=rust_toolchain::$(cat rust-toolchain)"

      # Toolchain
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ steps.vars.outputs.rust_toolchain }}
          override: true
          components: rustfmt, clippy

      # Fomatting
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      # Linting
      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
